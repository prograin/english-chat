services:
  # --------------------
  # Web Service
  # --------------------
  front-web:
    build:
      context: ../..
      dockerfile: frontends/web/Dockerfile
    container_name: front-web
    network_mode: host
    env_file:
      - ../../frontends/web/.env
    environment:
      NODE_ENV: production
      API_URL: localhost

  # --------------------
  # Chat Service
  # --------------------
  chat-service:
    build:
      context: ../..
      dockerfile: services/chat-service/Dockerfile
    container_name: chat-service
    network_mode: host
    env_file:
      - ../../services/chat-service/.chat.env
    environment:
      NODE_ENV: production
      DB_HOST: localhost
      REDIS_HOST: localhost
      ELASTIC_HOST: localhost
      API_URL: localhost
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      users-service:
        condition: service_healthy

  # --------------------
  # Presence Service
  # --------------------
  presence-service:
    build:
      context: ../..
      dockerfile: services/presence-service/Dockerfile
    container_name: presence-service
    network_mode: host
    env_file:
      - ../../services/presence-service/.presence.env
    environment:
      NODE_ENV: production
      DB_HOST: localhost
      REDIS_HOST: localhost
      ELASTIC_HOST: localhost
      API_URL: localhost
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  # --------------------
  # Telegram Bot Service
  # --------------------
  telegram-bot-service:
    build:
      context: ../..
      dockerfile: services/telegram-bot-service/Dockerfile
    container_name: telegram-bot-service
    network_mode: host
    env_file:
      - ../../services/telegram-bot-service/.telegram.env
    environment:
      NODE_ENV: production
      DB_HOST: localhost
      REDIS_HOST: localhost
      ELASTIC_HOST: localhost
      API_URL: localhost
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

  # --------------------
  # Search Service
  # --------------------
  search-service:
    build:
      context: ../..
      dockerfile: services/search-service/Dockerfile
    container_name: search-service
    network_mode: host
    env_file:
      - ../../services/search-service/.search.env
    environment:
      NODE_ENV: production
      DB_HOST: localhost
      REDIS_HOST: localhost
      ELASTIC_HOST: localhost
      API_URL: localhost
    depends_on:
      elasticsearch:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # --------------------
  # Relations Service
  # --------------------
  relations-service:
    build:
      context: ../..
      dockerfile: services/relations-service/Dockerfile
    container_name: relations-service
    network_mode: host
    env_file:
      - ../../services/relations-service/.relation.env
    environment:
      NODE_ENV: production
      DB_HOST: localhost
      REDIS_HOST: localhost
      ELASTIC_HOST: localhost
      API_URL: localhost
    depends_on:
      elasticsearch:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      users-service:
        condition: service_healthy

  # --------------------
  # Users Service
  # --------------------
  users-service:
    build:
      context: ../..
      dockerfile: services/users-service/Dockerfile
    container_name: users-service
    network_mode: host
    env_file:
      - ../../services/users-service/.users.env
    environment:
      NODE_ENV: production
      DB_HOST: localhost
      REDIS_HOST: localhost
      ELASTIC_HOST: localhost
      API_URL: localhost
    depends_on:
      elasticsearch:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h db -U ${POSTGRES_USER}"]
      interval: 5s
      retries: 5

  # --------------------
  # Database
  # --------------------
  db:
    image: postgres:15-alpine
    container_name: postgres-db
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  # --------------------
  # Redis
  # --------------------
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --------------------
  # Elasticsearch
  # --------------------
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.1
    container_name: elasticsearch-db
    env_file:
      - ./.env
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    restart: unless-stopped
    healthcheck:
      test: curl -s -u elastic:${ELASTIC_PASSWORD} -o /dev/null -w "%{http_code}" http://localhost:9200/
      interval: 30s
      retries: 50

  # --------------------
  # nginx
  # --------------------
  nginx-proxy:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - front-web
      - chat-service
      - presence-service

volumes:
  postgres_data:
  redis_data:
  elasticsearch:
